= What I need to do =
    1. [X] Front-end build it so grid and chat are next to each other
    2. [X] Make the chat functional
    3. [X] Move all grid init logic to the back-end server
        1. [X] Partly done
        2. [X] 100%done
    4. [X] Make it so that games are initialized by creating a room
    5. [X] Make it so that joining a room joins the game
        1. [X] Player can join the game
        2. [X] Player's control different units
        3. [X] After x people, people that join are observers only
    6. [X] Make players color coded
    7. [X] One player in a room should(options):
        1. [X] Have a waiting lobby type thing, a pregame practice mode
        2. [X] Do nothing that can affect chances of winning the game
    8. [ ] There needs to be a smooth separation of player control
        1. [ ] Right now if you create a game and join a game two events get
               sent
        2. [ ] This double's actions and creates unnecessary computation
        3. [ ] But it should be done in a way that allows reconnection
    9. [X] Leaving a game needs handling
        1. [X] Should allow reconnect if no other games are joined
        2. [X] Should forfeit if another game joined
    10. [O] I want everything to be responsive and usable on mobile devices
        1. [X] On desktop resolutions 
            1. [X] The squares should be a pleasant enough
                   size so that everything is visible and proportionate 
        2. [o] On mobile resolutions
            1. [o] Everything should still be present and usable
                1. [X] But displaying the grid/chat should be toggled
                2. [ ] Buttons need work
    11. [X] Establish Win and Lose Conditions
    12. [X] Make a game history page
    13. [ ] Make a tutorial
    14. [ ] A production version

= What I was doing last =

I think I need something that acts as a better driving force for winning and
losing. My idea is just a timer and whoever gets the most squares in the time
limit wins, or whoever crashes into something loses. 

The timer is pretty much set up. It just needs some events to make happen. Like
a function that does an io.emit:"Time's up!" (wait a moment) io.emit:"X is the
winner" and blocks further actions in game

